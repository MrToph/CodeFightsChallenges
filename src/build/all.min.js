/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';
	
	var powerset = function powerset(set) {
	    if (set.length == 0) return [[]];else {
	        var el = set.pop();
	        // console.log(el, set);
	        var rek = powerset(set);
	        var map = rek.map(function (x) {
	            var ret = x.slice();ret.push(el);return ret;
	        }); // push unfortunately returns the index of the new element
	        // console.log('rek', rek, 'map', map)
	        return rek.concat(map);
	    }
	};
	
	// var bla = [[1,2,3], [4,5,6]];
	// console.log(bla.map(x => {console.log(x); return x.push(10)}));
	
	console.log('empty set', powerset([]));
	console.log('finished', powerset([1]));
	console.log(powerset([1, 2, 3]));
	window.powerset = powerset;

/***/ }
/******/ ]);
//# sourceMappingURL=all.min.js.map