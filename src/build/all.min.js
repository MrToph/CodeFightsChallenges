/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";
	
	LongMatrixProduct = function LongMatrixProduct(m, n) {
	  l = m.length;
	  d = new Array(l).fill(0).map(function (x) {
	    return new Array(l);
	  });
	  r = function (_r) {
	    function r(_x, _x2) {
	      return _r.apply(this, arguments);
	    }
	
	    r.toString = function () {
	      return _r.toString();
	    };
	
	    return r;
	  }(function (s, e) {
	    if (d[s][e] !== undefined) {
	      return d[s][e];
	    }
	    if (e - s === 0) {
	      d[s][e] = 0;
	      return d[s][e];
	    }
	    v = Infinity;
	    for (var i = s; i < e; i++) {
	      v = Math.min(v, r(s, i) + r(i + 1, e) + m[s] * n[i] * n[e]);
	    }
	    d[s][e] = v;
	    return d[s][e];
	  });
	  // console.log(d)
	  return r(0, l - 1);
	};
	
	// function LongMatrixProduct (m, n) {
	//   var l = m.length;
	//   var d = new Array(l).fill(0).map(x => new Array(l));
	//   function rec (start, end) {
	//     if (d[start][end] !== undefined) {
	//       return d[start][end];
	//     }
	//     if (end - start === 0) {
	//       d[start][end] = 0;
	//       return d[start][end];
	//     }
	//     var min = Infinity;
	//     for (var i = start; i < end; i++) {
	//       min = Math.min(min, rec(start, i) + rec(i + 1, end) + m[start] * n[i] * n[end]);
	//     }
	//     d[start][end] = min;
	//     return d[start][end];
	//   }
	//   return rec(0, l - 1);
	// }
	
	console.log(LongMatrixProduct([10, 100, 5], [100, 5, 50]));

/***/ }
/******/ ]);
//# sourceMappingURL=all.min.js.map