/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';
	
	function LongMatrixProduct(m, n) {
	  var l = m.length;
	  var d = new Array(l).fill(0).map(function (x) {
	    return new Array(l);
	  });
	  console.log(d);
	  function rec(start, end) {
	    console.log('rec(', start, end, ')');
	    if (d[start][end] !== undefined) {
	      return d[start][end];
	    }
	    if (end - start === 0) {
	      d[start][end] = 0;
	      return d[start][end];
	    }
	    // if(end - start === 1){
	    //  d[start][end] = m[start] * n[start] * n[end]; // mxn nxk => m*n*k
	    //  return d[start][end]
	    // }
	    var min = Infinity;
	    for (var i = start; i < end; i++) {
	      min = Math.min(min, rec(start, i) + rec(i + 1, end) + m[start] * n[i] * n[end]);
	    }
	    d[start][end] = min;
	    return d[start][end];
	  }
	  console.log(d);
	  return rec(0, l - 1);
	}
	
	LongMatrixProduct([10, 100, 5], [100, 5, 50]);

/***/ }
/******/ ]);
//# sourceMappingURL=all.min.js.map