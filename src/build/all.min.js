/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	function LadderGraph(N) {
	  var prime = 1000000007;
	  // let d = []
	  // d[0] = 1; d[1] = 5
	  // for (let i = 2; i < N; i++) {
	  //   d[i] = (((5 * d[i - 1]) % prime - (2 * d[i - 2]) % prime) + prime) % prime
	  //   console.log(i, d[i] % prime, d[i])
	  // }
	  var matrix = [[0, 1], [-2, 5]];
	
	  var _pow = pow(matrix, (N - 1) % (prime - 1), prime);
	
	  var _pow2 = _slicedToArray(_pow, 2);
	
	  var _pow2$ = _slicedToArray(_pow2[0], 2);
	
	  var a = _pow2$[0];
	  var b = _pow2$[1];
	
	  var _pow2$2 = _slicedToArray(_pow2[1], 2);
	
	  var c = _pow2$2[0];
	  var d = _pow2$2[1]; // eulers quotient function we can reduce the mod
	
	  var start = [1, 5];
	  //console.log('a,b ' , a, b);
	  var answer = (a * start[0] % prime + b * start[1] % prime + prime) % prime;
	  return answer;
	}
	
	function pow(matrix, exp, mod) {
	  if (exp === 1) return matrix;
	  if (exp % 2 === 0) {
	    var m = pow(matrix, exp / 2, mod);
	    return mult(m, m, mod);
	  } else {
	    return mult(matrix, pow(matrix, exp - 1, mod), mod);
	  }
	}
	
	function mult(a, b, mod) {
	  // a = k x m --- b = m x n
	  var k = a.length,
	      m = a[0].length,
	      n = b[0].length;
	  // c = k x n
	  var c = new Array(k);
	  for (var i = 0; i < k; i++) {
	    c[i] = new Array(n).fill(0);
	    for (var j = 0; j < n; j++) {
	      for (var s = 0; s < m; s++) {
	        c[i][j] = (c[i][j] + multSafe(a[i][s], b[s][j], mod).mod(mod)).mod(mod);
	        //console.log(i, j, s, 'a[i][s]', a[i][s], 'b[s][j]', b[s][j], 'c[i][j]', c[i][j]);
	      }
	    }
	  }
	  //console.log(c);
	  return c;
	}
	
	var MAX_SAFE_INTEGER_SQR = Math.sqrt(Number.MAX_SAFE_INTEGER); // 9.5 * 10^7
	function multSafe(a, b, mod) {
	  // a,b <= 10^9 + 7^, 	mod = 10^9+7
	  if (a > MAX_SAFE_INTEGER_SQR && b > MAX_SAFE_INTEGER_SQR) {
	    var b_sqr = Math.floor(Math.sqrt(b));
	    var remainder = b - b_sqr * b_sqr;
	    var tmp = a * b_sqr % mod; // mod will apply here always, because a * b_sqrt > 10^12, and prime is 10^9+7
	    return remainder * a + tmp * b_sqr;
	  }
	  return a * b;
	}
	
	Number.prototype.mod = function (n) {
	  return (this % n + n) % n;
	};
	
	for (var i = 5; i <= 1000; i++) {
	  console.log(LadderGraph(i)); // 946025
	}
	console.log(Number.MAX_SAFE_INTEGER); // 9 * 10^15 = 2^53 - 1
	console.log(LadderGraph(10)); // 946025
	console.log(LadderGraph(1000)); // 884272384
	console.log(LadderGraph(123456)); // 280556729
	
	// https://oeis.org/A107839

/***/ }
/******/ ]);
//# sourceMappingURL=all.min.js.map